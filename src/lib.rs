#[macro_use]
extern crate lalrpop_util;

lalrpop_mod!(
    #[allow(clippy::all)]
    pub grammar
);

#[derive(Debug)]
pub enum CalcError {
    UnknownVariable(String),
    PowTooLarge,
}

pub use grammar::StmtParser as Parser;

#[cfg(test)]
mod test {
    use super::*;
    use num_bigint::BigInt;
    use std::collections::HashMap;

    #[test]
    fn test_pass_parse_1() {
        let mut state = HashMap::new();
        grammar::StmtParser::new()
            .parse(
                &mut state,
                "let a = 2201381908479023740917509813750817085337801471083271098371083712;",
            )
            .expect("parse error");
        let res = grammar::StmtParser::new()
            .parse(
                &mut state,
                "a ^ 3 + 31490871094829048190438129038901839012839021809320 ^ 10 * (101329013810938920831 ^ 12);",
            )
            .expect("parse error");
        assert_eq!(res.expect("no result"), BigInt::parse_bytes(b"1123705566855539887781384660980274029459444363287774444907656691412384103483530238394929579510683046896622436769327242473859599247587781596139355163894796477533306278164014268531034832458433595391755522009281392762086077897693411343156583986996817719285469410363281923375403489334635100809804475397218440141455591010808332496731927442201309504737096082509763807016519395483584809481420812192600435029796718882757832459647402250872562763267665957346211939706312019318879144970548103485374736159816624005937617014757950078612020372075837153660035547694427875796942333128764868812055309215709306826793456781894163265714093857338879261172369567444031392875279200055261481285358618321139809506274751360905025455040343985528888525729166000128", 10).unwrap());
    }
}
