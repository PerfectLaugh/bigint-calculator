use std::collections::HashMap;

use lalrpop_util::ParseError;

use num_bigint::BigInt;

use super::CalcError;

grammar<'state>(state: &'state mut HashMap<String, BigInt>);

extern {
    type Error = CalcError;
}

pub Stmt: Option<BigInt> = {
    "let" <name: Ident> "=" <value: Expr> ";" => {
        state.insert(name.to_string(), value);
        None
    },
    <Expr> ";" => {
        Some(<>)
    },
    <Expr> => {
        Some(<>)
    },
};

Ident: &'input str =
    <r"[a-zA-Z][a-zA-Z0-9]*"> => <>;

Expr: BigInt = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
};

Factor: BigInt = {
    <l:Factor> "*" <r:Power> => l * r,
    <l:Factor> "/" <r:Power> =>? {
        l.checked_div(&r).ok_or(ParseError::User {
            error: CalcError::DivisionByZero
        })
    },
    Power,
};

Power: BigInt = {
    <l:Power> "^" <r:Term> =>? {
        let r = r.try_into().map_err(|_| ParseError::User {
            error: CalcError::NotValidPower
        })?;
        Ok(l.pow(r))
    },
    Term,
};

Term: BigInt = {
    Num,
    <Ident> =>? {
        state.get(<>).cloned().ok_or(ParseError::User {
            error: CalcError::UnknownVariable(<>.to_string()),
        })
    },
    "(" <Expr> ")",
};

Num: BigInt = {
    <r"-?[0-9]+"> => BigInt::parse_bytes(<>.as_bytes(), 10).unwrap(),
    <r"-?0x[0-9a-fA-F]+"> => BigInt::parse_bytes(&<>.replace("0x", "").as_bytes(), 16).unwrap(),
    <r"-?0o[0-7]+"> => BigInt::parse_bytes(&<>.replace("0o", "").as_bytes(), 8).unwrap(),
    <r"-?0b[0-1]+"> => BigInt::parse_bytes(&<>.replace("0b", "").as_bytes(), 2).unwrap(),
};
